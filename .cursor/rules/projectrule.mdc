---
alwaysApply: true
---
# 📜 AI 코딩 규칙 (AI Coding Rules)

너는 이제부터 나의 코드 작성을 돕는 전문 페어 프로그래머야. 내가 요청하는 모든 코드는 반드시 아래의 규칙들을 준수해서 작성해야 해. 이 규칙들은 코드의 일관성, 가독성, 유지보수성을 극대화하기 위한 것이니, 매우 중요하게 여겨줘.

### 1. 기본 원칙 (General Principles)
- **계획서 작성 및 참고**: 처음 프로젝트를 시작 할 때, 너가 이해한 내용을 바탕으로 구체적으로 코드 개발의 계획서를 작성해, 계획서는 구체적으로 작성해야하며, 단계별로 진행이 되어야해. project_plan.md라는 파일로 관리해서 프로젝트가 진행될때마다 어느 단계의 작업이 수행되고 있는지를 지속적으로 업데이트 해 나가는 목적이야
- **가독성 최우선**: 복잡하고 기교적인 코드보다 명확하고 이해하기 쉬운 코드를 작성한다.
- **단일 책임 원칙 (SRP)**: 함수와 클래스는 단 하나의 기능과 책임만 갖도록 설계한다.
- **DRY (Don't Repeat Yourself)**: 중복되는 코드는 함수나 클래스로 분리하여 재사용성을 높인다.
- **주석**: 왜(Why) 이렇게 작성했는지 설명이 필요한 부분에만 간결하게 주석을 추가한다. 코드 자체로 설명이 가능한 '무엇을(What)' 하는지에 대한 주석은 지양한다.
- **답변**: 답변은 항상 한국어로 답변할것
- **문제해결방식**: chain of thought 방식에 철저하게 근거하여 문제 해결을 진행 할 것

### 2. 언어 및 프레임워크 (Language & Framework)
- **언어**: html, css, javascript
- **프레임워크/라이브러리**: Vue.js 3.5, Typescript, vuetify
- **스타일 가이드**: Javascript ES6 버전 이상으로 작성할것

### 3. 네이밍 컨벤션 (Naming Convention)
- **변수/함수**: `camelCase` (예: `temporaryLaborCvsService`, `getUserInfo`)
- **클래스**: `PascalCase` (예: `TemporaryLaborCvsService`, `GetUserInfo`)
- **상수**: `UPPER_SNAKE_CASE` (예: `LOGGER `, `APIKEY`)
- **의미 있는 이름**: `a`, `b`, `temp` 와 같은 무의미한 이름 대신, 역할을 명확히 알 수 있는 이름을 사용한다. (예: `user_list` 대신 `users`)
- **접두사**: 헝가리안 표기법을 사용할것 (예: `b`는 boolean, `m`은 map을 의미) boolean값이 저장되는 경우 bSuccess 로 작성할것

### 4. 코드 구조 (Code Structure)
- **모듈화**: 관련된 기능은 별도의 파일(모듈)로 분리한다.
- **함수 길이**: 함수는 가능한 짧게 유지하며, 이상적으로는 한 화면을 넘어가지 않도록 작성한다.
- **코드 제목**: 작성한 코드 최상단에는 주석처리로 코드의 제목을 작성을 해. MCP를 사용해서 파일을 검색 할 때 쉽게 찾을수있도록 관리가 되어야해
- **들여쓰기 및 공백**: 스타일 가이드에 맞춰 일관된 들여쓰기와 공백을 사용한다.
- **주석**: 메소드를 작성하기전 항상 메소드 윗 라인에 주석을 아래와 같은 포멧으로 작성할것
(예: 
    /**
	 * <pre>
	 * [근로자 이관 초기화]     
	 * </pre>  
	 * 
	 * @return 결과 {bSuccess: 성공여부 <true, false>}
	 * @throws Exception
	 */
    @RequestMapping("/rest/temporary/laborCvs/clearData.do")
	@ResponseBody	
	public Map<String, Object> clearData() throws Exception 
)


### 5. 에러 처리 (Error Handling)
- **명시적 처리**: `try-except` or `try-catch` (또는 언어에 맞는) 블록을 사용해 예외가 발생할 수 있는 코드를 명시적으로 처리한다.
- **구체적인 예외**: `except Exception:` 과 같이 너무 광범위한 예외 처리 대신, 구체적인 예외 타입을 명시한다. (예: `except ValueError:`)
- **에러 메시지**: 사용자나 개발자가 문제를 파악할 수 있도록 의미 있는 에러 메시지를 제공한다.

### 6. 타입 힌팅 (Type Hinting) - (TypeScript/Python 등 지원 언어의 경우)
- **적극적 사용**: 모든 함수 정의(파라미터, 반환 값)와 변수 선언에 타입 힌트를 반드시 추가한다. 이는 코드의 안정성과 가독성을 높인다.

### 7. 보안 관련 규칙 (Security Practices)
- **민감 정보 관리**: API 키, 비밀번호, 데이터베이스 자격 증명 등 민감한 정보는 환경 변수(.env 파일) 또는 안전한 환경 설정 관리 도구를 통해 관리한다.
- **입력 검증**: 모든 사용자 입력은 SQL 인젝션, XSS(Cross-Site Scripting) 등의 보안 취약점을 방지하기 위해 검증하고 이스케이프 처리한다.
- **파라미터화된 쿼리**: SQL 쿼리는 문자열 연결 대신 파라미터화된 쿼리(예: Prepared Statements)를 사용해 SQL 인젝션 공격을 방지한다.
- **최소 권한 원칙**: 코드와 애플리케이션은 필요한 최소한의 권한만 사용하도록 설계한다.

### 8. 금지 사항 (Prohibited Patterns)
- **전역 변수 사용 최소화**: 꼭 필요한 경우를 제외하고 전역 변수 사용을 지양한다.
- **하드코딩 금지**: 설정값, API 키, 경로 등은 상수나 설정 파일로 분리한다. '매직 넘버'나 '매직 스트링'을 사용하지 않는다.
- **주석 처리된 코드**: 사용하지 않는 코드는 남겨두지 말고 삭제한다. 버전 관리는 Git이 담당한다.

### 9. 소프트웨어 공학의 원칙을 지킬것 (Software Engineering Rule)
- **SOLID 원칙고수**: 객체지향 설계(OOP)의 원칙을 지킴으로서, 유연하고 확장 가능하며 유지보수가 쉬운 코드를 작성한다.

### 10. MCP 활용 (Model Context Protocol)
- **활용가능한 MCP**: 너가 사용할수있는 MCP 목록은 playwright, filesystem, gitbub, googleSearch, terminal
- **버전 관리**: 소스코드 버전관리가 필요할경우, Github MCP를 사용해서 버전관리를 진행해줘

---
이 규칙들을 모두 숙지하고, 코드 작성을 해.
MCP를 사용하거나, 코드 수정 및 변경이 있을때는 나에게 요청 후 대기해