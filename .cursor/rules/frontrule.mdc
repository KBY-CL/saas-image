---
alwaysApply: true
---
# 현대적인 Frontend UI 개발 Rules

## 1. 반응형 디자인 (Responsive Design)
- **Mobile-First 접근**: 모바일 화면부터 설계하고 데스크톱으로 확장
- **Fluid Grid System**: CSS Grid, Flexbox 활용한 유연한 레이아웃
- **Breakpoints 설정**: 320px, 768px, 1024px, 1440px 등 표준 중단점 활용
- **Viewport Meta Tag**: 올바른 viewport 설정으로 모바일 최적화
- **Container Queries**: 컨테이너 기반 반응형 디자인 고려

## 2. 접근성 (Accessibility - a11y)
- **Semantic HTML**: 의미 있는 HTML 태그 사용 (header, nav, main, section, article)
- **ARIA 속성**: screen reader 지원을 위한 적절한 ARIA 라벨링
- **키보드 내비게이션**: Tab 순서와 Focus 관리
- **색상 대비**: WCAG 기준을 만족하는 색상 대비율 (4.5:1 이상)
- **Alt 텍스트**: 모든 이미지에 의미 있는 alt 속성 제공
- **Focus Indicators**: 키보드 사용자를 위한 명확한 포커스 표시

## 3. 성능 최적화 (Performance)
- **이미지 최적화**: WebP, AVIF 형식 사용, lazy loading 적용
- **코드 분할**: Dynamic imports로 번들 크기 최적화
- **CSS 최적화**: Critical CSS 인라인화, 불필요한 스타일 제거
- **폰트 최적화**: font-display: swap, 웹폰트 preload
- **리소스 힌트**: preload, prefetch, preconnect 활용
- **Tree Shaking**: 사용하지 않는 코드 제거
- **압축**: Gzip, Brotli 압축 활용

## 4. 모던 CSS 기법
- **CSS Custom Properties**: CSS 변수 활용한 테마 시스템
- **CSS Grid & Flexbox**: 현대적인 레이아웃 시스템
- **CSS Modules/Styled Components**: 스타일 캡슐화
- **PostCSS/Sass**: 고급 CSS 전처리기 활용
- **CSS-in-JS**: 동적 스타일링 (styled-components, emotion)
- **Utility-First CSS**: Tailwind CSS 같은 유틸리티 클래스 활용

## 5. 컴포넌트 기반 아키텍처
- **Atomic Design**: Atoms, Molecules, Organisms, Templates, Pages
- **재사용 가능한 컴포넌트**: Props를 통한 유연한 컴포넌트 설계
- **컴포넌트 합성**: Higher-Order Components, Render Props, Hooks
- **Design System**: 일관된 UI 컴포넌트 라이브러리 구축
- **Storybook**: 컴포넌트 문서화 및 독립적 개발 환경

## 6. CSS 작성 방법
- **Function and Class**: 컴포넌트나 Class에 디자인을 적용할경우, CSS 선택자 특이성을 활용하여 구현
- **인라인 스타일 사용 금지** : 인라인스타일로 색상이나 디자인을 하드코딩 하는 방식 금지
- **Important 사용 지양** : !important는 불가피하게 사용해야할경우가 아니면 되도록 사용 금지
---
위 내용을 숙지하되, .cursor/rules/.project_rules도 항상 명심하고 작업해야해